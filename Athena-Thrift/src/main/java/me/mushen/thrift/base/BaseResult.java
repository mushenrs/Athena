/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.mushen.thrift.base;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-15")
public class BaseResult implements org.apache.thrift.TBase<BaseResult, BaseResult._Fields>, java.io.Serializable, Cloneable, Comparable<BaseResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseResult");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolValue", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteValue", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField INT16_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int16Value", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField INT32_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int32Value", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INT64_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int64Value", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField STR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("strValue", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseResultTupleSchemeFactory());
  }

  public Result result; // required
  public boolean boolValue; // optional
  public byte byteValue; // optional
  public short int16Value; // optional
  public int int32Value; // optional
  public long int64Value; // optional
  public double doubleValue; // optional
  public String strValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    BOOL_VALUE((short)2, "boolValue"),
    BYTE_VALUE((short)3, "byteValue"),
    INT16_VALUE((short)4, "int16Value"),
    INT32_VALUE((short)5, "int32Value"),
    INT64_VALUE((short)6, "int64Value"),
    DOUBLE_VALUE((short)7, "doubleValue"),
    STR_VALUE((short)8, "strValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // BOOL_VALUE
          return BOOL_VALUE;
        case 3: // BYTE_VALUE
          return BYTE_VALUE;
        case 4: // INT16_VALUE
          return INT16_VALUE;
        case 5: // INT32_VALUE
          return INT32_VALUE;
        case 6: // INT64_VALUE
          return INT64_VALUE;
        case 7: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 8: // STR_VALUE
          return STR_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLVALUE_ISSET_ID = 0;
  private static final int __BYTEVALUE_ISSET_ID = 1;
  private static final int __INT16VALUE_ISSET_ID = 2;
  private static final int __INT32VALUE_ISSET_ID = 3;
  private static final int __INT64VALUE_ISSET_ID = 4;
  private static final int __DOUBLEVALUE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BOOL_VALUE,_Fields.BYTE_VALUE,_Fields.INT16_VALUE,_Fields.INT32_VALUE,_Fields.INT64_VALUE,_Fields.DOUBLE_VALUE,_Fields.STR_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
    tmpMap.put(_Fields.BOOL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("boolValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("byteValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INT16_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int16Value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT32_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int32Value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT64_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int64Value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("strValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseResult.class, metaDataMap);
  }

  public BaseResult() {
  }

  public BaseResult(
    Result result)
  {
    this();
    this.result = result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseResult(BaseResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResult()) {
      this.result = new Result(other.result);
    }
    this.boolValue = other.boolValue;
    this.byteValue = other.byteValue;
    this.int16Value = other.int16Value;
    this.int32Value = other.int32Value;
    this.int64Value = other.int64Value;
    this.doubleValue = other.doubleValue;
    if (other.isSetStrValue()) {
      this.strValue = other.strValue;
    }
  }

  public BaseResult deepCopy() {
    return new BaseResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    setBoolValueIsSet(false);
    this.boolValue = false;
    setByteValueIsSet(false);
    this.byteValue = 0;
    setInt16ValueIsSet(false);
    this.int16Value = 0;
    setInt32ValueIsSet(false);
    this.int32Value = 0;
    setInt64ValueIsSet(false);
    this.int64Value = 0;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    this.strValue = null;
  }

  public Result getResult() {
    return this.result;
  }

  public BaseResult setResult(Result result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public boolean isBoolValue() {
    return this.boolValue;
  }

  public BaseResult setBoolValue(boolean boolValue) {
    this.boolValue = boolValue;
    setBoolValueIsSet(true);
    return this;
  }

  public void unsetBoolValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLVALUE_ISSET_ID);
  }

  /** Returns true if field boolValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLVALUE_ISSET_ID);
  }

  public void setBoolValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLVALUE_ISSET_ID, value);
  }

  public byte getByteValue() {
    return this.byteValue;
  }

  public BaseResult setByteValue(byte byteValue) {
    this.byteValue = byteValue;
    setByteValueIsSet(true);
    return this;
  }

  public void unsetByteValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  /** Returns true if field byteValue is set (has been assigned a value) and false otherwise */
  public boolean isSetByteValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEVALUE_ISSET_ID);
  }

  public void setByteValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEVALUE_ISSET_ID, value);
  }

  public short getInt16Value() {
    return this.int16Value;
  }

  public BaseResult setInt16Value(short int16Value) {
    this.int16Value = int16Value;
    setInt16ValueIsSet(true);
    return this;
  }

  public void unsetInt16Value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT16VALUE_ISSET_ID);
  }

  /** Returns true if field int16Value is set (has been assigned a value) and false otherwise */
  public boolean isSetInt16Value() {
    return EncodingUtils.testBit(__isset_bitfield, __INT16VALUE_ISSET_ID);
  }

  public void setInt16ValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT16VALUE_ISSET_ID, value);
  }

  public int getInt32Value() {
    return this.int32Value;
  }

  public BaseResult setInt32Value(int int32Value) {
    this.int32Value = int32Value;
    setInt32ValueIsSet(true);
    return this;
  }

  public void unsetInt32Value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT32VALUE_ISSET_ID);
  }

  /** Returns true if field int32Value is set (has been assigned a value) and false otherwise */
  public boolean isSetInt32Value() {
    return EncodingUtils.testBit(__isset_bitfield, __INT32VALUE_ISSET_ID);
  }

  public void setInt32ValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT32VALUE_ISSET_ID, value);
  }

  public long getInt64Value() {
    return this.int64Value;
  }

  public BaseResult setInt64Value(long int64Value) {
    this.int64Value = int64Value;
    setInt64ValueIsSet(true);
    return this;
  }

  public void unsetInt64Value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT64VALUE_ISSET_ID);
  }

  /** Returns true if field int64Value is set (has been assigned a value) and false otherwise */
  public boolean isSetInt64Value() {
    return EncodingUtils.testBit(__isset_bitfield, __INT64VALUE_ISSET_ID);
  }

  public void setInt64ValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT64VALUE_ISSET_ID, value);
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public BaseResult setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  public String getStrValue() {
    return this.strValue;
  }

  public BaseResult setStrValue(String strValue) {
    this.strValue = strValue;
    return this;
  }

  public void unsetStrValue() {
    this.strValue = null;
  }

  /** Returns true if field strValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStrValue() {
    return this.strValue != null;
  }

  public void setStrValueIsSet(boolean value) {
    if (!value) {
      this.strValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Result)value);
      }
      break;

    case BOOL_VALUE:
      if (value == null) {
        unsetBoolValue();
      } else {
        setBoolValue((Boolean)value);
      }
      break;

    case BYTE_VALUE:
      if (value == null) {
        unsetByteValue();
      } else {
        setByteValue((Byte)value);
      }
      break;

    case INT16_VALUE:
      if (value == null) {
        unsetInt16Value();
      } else {
        setInt16Value((Short)value);
      }
      break;

    case INT32_VALUE:
      if (value == null) {
        unsetInt32Value();
      } else {
        setInt32Value((Integer)value);
      }
      break;

    case INT64_VALUE:
      if (value == null) {
        unsetInt64Value();
      } else {
        setInt64Value((Long)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((Double)value);
      }
      break;

    case STR_VALUE:
      if (value == null) {
        unsetStrValue();
      } else {
        setStrValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case BOOL_VALUE:
      return isBoolValue();

    case BYTE_VALUE:
      return getByteValue();

    case INT16_VALUE:
      return getInt16Value();

    case INT32_VALUE:
      return getInt32Value();

    case INT64_VALUE:
      return getInt64Value();

    case DOUBLE_VALUE:
      return getDoubleValue();

    case STR_VALUE:
      return getStrValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case BOOL_VALUE:
      return isSetBoolValue();
    case BYTE_VALUE:
      return isSetByteValue();
    case INT16_VALUE:
      return isSetInt16Value();
    case INT32_VALUE:
      return isSetInt32Value();
    case INT64_VALUE:
      return isSetInt64Value();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case STR_VALUE:
      return isSetStrValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseResult)
      return this.equals((BaseResult)that);
    return false;
  }

  public boolean equals(BaseResult that) {
    if (that == null)
      return false;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_boolValue = true && this.isSetBoolValue();
    boolean that_present_boolValue = true && that.isSetBoolValue();
    if (this_present_boolValue || that_present_boolValue) {
      if (!(this_present_boolValue && that_present_boolValue))
        return false;
      if (this.boolValue != that.boolValue)
        return false;
    }

    boolean this_present_byteValue = true && this.isSetByteValue();
    boolean that_present_byteValue = true && that.isSetByteValue();
    if (this_present_byteValue || that_present_byteValue) {
      if (!(this_present_byteValue && that_present_byteValue))
        return false;
      if (this.byteValue != that.byteValue)
        return false;
    }

    boolean this_present_int16Value = true && this.isSetInt16Value();
    boolean that_present_int16Value = true && that.isSetInt16Value();
    if (this_present_int16Value || that_present_int16Value) {
      if (!(this_present_int16Value && that_present_int16Value))
        return false;
      if (this.int16Value != that.int16Value)
        return false;
    }

    boolean this_present_int32Value = true && this.isSetInt32Value();
    boolean that_present_int32Value = true && that.isSetInt32Value();
    if (this_present_int32Value || that_present_int32Value) {
      if (!(this_present_int32Value && that_present_int32Value))
        return false;
      if (this.int32Value != that.int32Value)
        return false;
    }

    boolean this_present_int64Value = true && this.isSetInt64Value();
    boolean that_present_int64Value = true && that.isSetInt64Value();
    if (this_present_int64Value || that_present_int64Value) {
      if (!(this_present_int64Value && that_present_int64Value))
        return false;
      if (this.int64Value != that.int64Value)
        return false;
    }

    boolean this_present_doubleValue = true && this.isSetDoubleValue();
    boolean that_present_doubleValue = true && that.isSetDoubleValue();
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_strValue = true && this.isSetStrValue();
    boolean that_present_strValue = true && that.isSetStrValue();
    if (this_present_strValue || that_present_strValue) {
      if (!(this_present_strValue && that_present_strValue))
        return false;
      if (!this.strValue.equals(that.strValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_boolValue = true && (isSetBoolValue());
    list.add(present_boolValue);
    if (present_boolValue)
      list.add(boolValue);

    boolean present_byteValue = true && (isSetByteValue());
    list.add(present_byteValue);
    if (present_byteValue)
      list.add(byteValue);

    boolean present_int16Value = true && (isSetInt16Value());
    list.add(present_int16Value);
    if (present_int16Value)
      list.add(int16Value);

    boolean present_int32Value = true && (isSetInt32Value());
    list.add(present_int32Value);
    if (present_int32Value)
      list.add(int32Value);

    boolean present_int64Value = true && (isSetInt64Value());
    list.add(present_int64Value);
    if (present_int64Value)
      list.add(int64Value);

    boolean present_doubleValue = true && (isSetDoubleValue());
    list.add(present_doubleValue);
    if (present_doubleValue)
      list.add(doubleValue);

    boolean present_strValue = true && (isSetStrValue());
    list.add(present_strValue);
    if (present_strValue)
      list.add(strValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(BaseResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolValue()).compareTo(other.isSetBoolValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolValue, other.boolValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteValue()).compareTo(other.isSetByteValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteValue, other.byteValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt16Value()).compareTo(other.isSetInt16Value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt16Value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int16Value, other.int16Value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt32Value()).compareTo(other.isSetInt32Value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt32Value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int32Value, other.int32Value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt64Value()).compareTo(other.isSetInt64Value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt64Value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int64Value, other.int64Value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrValue()).compareTo(other.isSetStrValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strValue, other.strValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseResult(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (isSetBoolValue()) {
      if (!first) sb.append(", ");
      sb.append("boolValue:");
      sb.append(this.boolValue);
      first = false;
    }
    if (isSetByteValue()) {
      if (!first) sb.append(", ");
      sb.append("byteValue:");
      sb.append(this.byteValue);
      first = false;
    }
    if (isSetInt16Value()) {
      if (!first) sb.append(", ");
      sb.append("int16Value:");
      sb.append(this.int16Value);
      first = false;
    }
    if (isSetInt32Value()) {
      if (!first) sb.append(", ");
      sb.append("int32Value:");
      sb.append(this.int32Value);
      first = false;
    }
    if (isSetInt64Value()) {
      if (!first) sb.append(", ");
      sb.append("int64Value:");
      sb.append(this.int64Value);
      first = false;
    }
    if (isSetDoubleValue()) {
      if (!first) sb.append(", ");
      sb.append("doubleValue:");
      sb.append(this.doubleValue);
      first = false;
    }
    if (isSetStrValue()) {
      if (!first) sb.append(", ");
      sb.append("strValue:");
      if (this.strValue == null) {
        sb.append("null");
      } else {
        sb.append(this.strValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (result != null) {
      result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseResultStandardSchemeFactory implements SchemeFactory {
    public BaseResultStandardScheme getScheme() {
      return new BaseResultStandardScheme();
    }
  }

  private static class BaseResultStandardScheme extends StandardScheme<BaseResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseResult struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new Result();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolValue = iprot.readBool();
              struct.setBoolValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteValue = iprot.readByte();
              struct.setByteValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT16_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.int16Value = iprot.readI16();
              struct.setInt16ValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT32_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int32Value = iprot.readI32();
              struct.setInt32ValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INT64_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int64Value = iprot.readI64();
              struct.setInt64ValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strValue = iprot.readString();
              struct.setStrValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        struct.result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolValue()) {
        oprot.writeFieldBegin(BOOL_VALUE_FIELD_DESC);
        oprot.writeBool(struct.boolValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByteValue()) {
        oprot.writeFieldBegin(BYTE_VALUE_FIELD_DESC);
        oprot.writeByte(struct.byteValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt16Value()) {
        oprot.writeFieldBegin(INT16_VALUE_FIELD_DESC);
        oprot.writeI16(struct.int16Value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt32Value()) {
        oprot.writeFieldBegin(INT32_VALUE_FIELD_DESC);
        oprot.writeI32(struct.int32Value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt64Value()) {
        oprot.writeFieldBegin(INT64_VALUE_FIELD_DESC);
        oprot.writeI64(struct.int64Value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.doubleValue);
        oprot.writeFieldEnd();
      }
      if (struct.strValue != null) {
        if (struct.isSetStrValue()) {
          oprot.writeFieldBegin(STR_VALUE_FIELD_DESC);
          oprot.writeString(struct.strValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseResultTupleSchemeFactory implements SchemeFactory {
    public BaseResultTupleScheme getScheme() {
      return new BaseResultTupleScheme();
    }
  }

  private static class BaseResultTupleScheme extends TupleScheme<BaseResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      if (struct.isSetBoolValue()) {
        optionals.set(1);
      }
      if (struct.isSetByteValue()) {
        optionals.set(2);
      }
      if (struct.isSetInt16Value()) {
        optionals.set(3);
      }
      if (struct.isSetInt32Value()) {
        optionals.set(4);
      }
      if (struct.isSetInt64Value()) {
        optionals.set(5);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(6);
      }
      if (struct.isSetStrValue()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetResult()) {
        struct.result.write(oprot);
      }
      if (struct.isSetBoolValue()) {
        oprot.writeBool(struct.boolValue);
      }
      if (struct.isSetByteValue()) {
        oprot.writeByte(struct.byteValue);
      }
      if (struct.isSetInt16Value()) {
        oprot.writeI16(struct.int16Value);
      }
      if (struct.isSetInt32Value()) {
        oprot.writeI32(struct.int32Value);
      }
      if (struct.isSetInt64Value()) {
        oprot.writeI64(struct.int64Value);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
      if (struct.isSetStrValue()) {
        oprot.writeString(struct.strValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.result = new Result();
        struct.result.read(iprot);
        struct.setResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boolValue = iprot.readBool();
        struct.setBoolValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.byteValue = iprot.readByte();
        struct.setByteValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.int16Value = iprot.readI16();
        struct.setInt16ValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.int32Value = iprot.readI32();
        struct.setInt32ValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.int64Value = iprot.readI64();
        struct.setInt64ValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.strValue = iprot.readString();
        struct.setStrValueIsSet(true);
      }
    }
  }

}

